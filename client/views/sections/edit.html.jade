// ko foreach: openDiagrams
.class-diagram(data-bind="with: data")
	svg(
		data-bind="\
			visible: $parent === $root.chosenDiagram(),\
			attr: { viewBox: viewBox },\
			bindElement: element,\
			style: { backgroundPosition: bgPosition, backgroundSize: bgSize }\
		",
		width="100%", height="100%"
	)
		// ko template: { name: 'relationship-tmpl', foreach: relationships }
		// /ko

		g.fake(data-bind="if: fakeRelationshipIsVisible")
			// ko template: { name: 'relationship-tmpl', data: fakeRelationship }
			// /ko

		g.fake(data-bind="if: fakeEssentialIsVisible")
			// ko template: { name: 'essential-tmpl', data: fakeEssential }
			// /ko

		// ko template: { name: 'essential-tmpl', foreach: essentials }
		// /ko

	.control-menu.fade(data-bind="\
		css: { in: openMenu() === 'control' },\
		style: {\
			left: controlMenuPosX() + 'px',\
			top: controlMenuPosY() + 'px',\
			width: controlMenuWidth() + 'px',\
			height: controlMenuHeight() + 'px'\
		}\
	")
		button.btn.btn-rm-essential: i.icon-remove
		button.btn.btn-edit-essential: i.icon-edit
		button.btn.btn-link-essential: i.icon-arrow-right

	.creating-menu.fade(data-bind="\
		css: { in: openMenu() === 'creating' },\
		style: {\
			left: creatingMenuPosX() + 'px',\
			top: creatingMenuPosY() + 'px'\
		}\
	")
		button.btn.btn-make-class C
		button.btn.btn-make-interface I
		button.btn.btn-make-note: i.icon-comment

	.relationship-menu.popover.fade(data-bind="\
		bindElement: relationshipMenuElement,\
		css: {\
			in: openMenu() === 'relationship',\
			left: relationshipMenuPosition() === 'left',\
			right: relationshipMenuPosition() === 'right',\
			top: relationshipMenuPosition() === 'top',\
			bottom: relationshipMenuPosition() === 'bottom'\
		},\
		style: {\
			top: relationshipMenuPosY() + 'px',\
			left: relationshipMenuPosX() + 'px'\
		}\
	")
		.arrow
		.popover-inner
			.popover-content(data-bind="with: chosenRelationship")
				button.btn.rm-relationship: i.icon-remove
				
				.types(data-bind="foreach: 'association aggregation composition \
					generalization realization dependency'.words()\
				")
					button.btn(data-bind="css: {\
						'btn-inverse': $parent.type() === $data },\
						attr: { disabled: $parent.isItself() &&\
							($data === 'generalization' || $data === 'realization') }\
					")
						i(data-bind="css: 'icon-' + $data")

				// ko ifnot: isClassLevel
				hr
				.from
					select.multiplicity(data-bind="value: fromMultiplicity")
						option(value="")
						option(value="0..1") 0..1
						option(value="1") 1
						// ko if: type() !== 'composition'
						option(value="*") *
						option(value="1..*") 1..*
						// /ko

					input.indicator(type="text", data-bind="value: fromIndicator")

				hr
				.to
					select.multiplicity(data-bind="value: toMultiplicity")
						option(value="")
						option(value="0..1") 0..1
						option(value="1") 1
						option(value="*") *
						option(value="1..*") 1..*

					input.indicator(type="text", data-bind="value: toIndicator")
				// /ko

	.essential-menu.popover.fade(data-bind="\
		bindElement: essentialMenuElement,\
		css: {\
			in: openMenu() === 'essential',\
			left: essentialMenuPosition() === 'left',\
			right: essentialMenuPosition() === 'right'\
		},\
		style: {\
			top: essentialMenuPosY() + 'px',\
			left: essentialMenuPosX() + 'px'\
		}\
	")
		.arrow(data-bind="style: { top: essentialMenuArrowPos() + '%' }")
		.popover-inner
			.popover-content(data-bind="with: chosenEssential")
				input.class-name(type="text", data-bind="value: name")
				hr
				.colors(data-bind="foreach: 'white blue green yellow grey'.words()")
					.color(data-bind="style: { backgroundColor: $data },\
						css: { 'active-color': $data === $parent.color() }")
				hr
				.attributes(data-bind="foreach: attributes")
					.attribute
						select.visibility(data-bind="value: visibility")
							option(value="+") +
							option(value="-") -
							option(value="#") #
							option(value="~") ~
							option(value="/") /
						input.name(type="text", data-bind="value: name")
						input.type(type="text", data-bind="value: type")
						button.btn.btn-static-toggle(
							data-bind="css: { 'btn-inverse': isStatic }") S
						button.btn.btn-rm-attribute: i.icon-remove
						
				button.btn.btn-add-attribute: i.icon-plus

				hr
				.operations(data-bind="foreach: operations")
					.operation
						select.visibility(data-bind="value: visibility")
							option(value="+") +
							option(value="-") -
							option(value="#") #
							option(value="~") ~
							option(value="/") /
						input.name(type="text", data-bind="value: name")
						input.type(type="text", data-bind="value: type")
						button.btn.btn-params-toggle(
							data-bind="css: { 'btn-inverse': paramsAreOpen } ") P
						button.btn.btn-static-toggle(
							data-bind="css: { 'btn-inverse': isStatic }") S
						button.btn.btn-rm-operation: i.icon-remove

						// ko if: paramsAreOpen
						.params(data-bind="foreach: params")
							input.param-name(type="text", data-bind="value: name")
							input.param-type(type="text", data-bind="value: type")
							button.btn.btn-rm-param: i.icon-remove

						button.btn.btn-add-param: i.icon-plus
						// /ko
						
				button.btn.btn-add-operation: i.icon-plus
// /ko