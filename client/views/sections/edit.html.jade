// ko foreach: openDiagrams
.class-diagram(data-bind="with: data")
	svg(
		data-bind="\
			visible: $parent === $root.chosenDiagram(),\
			attr: { viewBox: viewBox },\
			bindElement: element,\
			style: { backgroundPosition: bgPosition, backgroundSize: bgSize }\
		",
		width="100%", height="100%"
	)
		// ko foreach: relationships
		// ko template: { name: type() + '-tmpl' }
		// /ko
		// /ko

		// ko template: { name: 'essential-tmpl', foreach: essentials }
		// /ko

	.control-menu.fade(data-bind="\
		css: { in: openMenu() === 'control' },\
		style: {\
			left: controlMenuPosX() + 'px',\
			top: controlMenuPosY() + 'px',\
			width: controlMenuWidth() + 'px',\
			height: controlMenuHeight() + 'px'\
		}\
	")
		button.btn.btn-rm-essential: i.icon-remove
		button.btn.btn-edit-essential: i.icon-edit
		button.btn.btn-link-essential: i.icon-arrow-right

	.creating-menu.fade(data-bind="\
		css: { in: openMenu() === 'creating' },\
		style: {\
			left: creatingMenuPosX() + 'px',\
			top: creatingMenuPosY() + 'px'\
		}\
	")
		button.btn.btn-make-class C
		button.btn.btn-make-interface I
		button.btn.btn-make-note: i.icon-comment

	.essential-menu.popover.fade(data-bind="\
		bindElement: essentialMenuElement,\
		css: {\
			in: openMenu() === 'essential',\
			left: essentialMenuPosition() === 'left',\
			right: essentialMenuPosition() === 'right'\
		},\
		style: {\
			top: essentialMenuPosY() + 'px',\
			left: essentialMenuPosX() + 'px'\
		}\
	")
		.arrow(data-bind="style: { top: essentialMenuArrowPos() + '%' }")
		.popover-inner
			.popover-content(data-bind="with: chosenEssential")
				input.class-name(type="text", data-bind="value: name")
				hr
				.colors(data-bind="foreach: 'white blue green yellow grey'.words()")
					.color(data-bind="style: { backgroundColor: $data },\
						css: { 'active-color': $data === $parent.color() }")
				hr
				.attributes(data-bind="foreach: attributes")
					.attribute
						select.visibility(data-bind="value: visibility")
							option(value="+") +
							option(value="-") -
							option(value="#") #
							option(value="~") ~
							option(value="/") /
						input.name(type="text", data-bind="value: name")
						input.type(type="text", data-bind="value: type")
						button.btn.btn-static-toggle(
							data-bind="css: { 'btn-inverse': isStatic }") S
						button.btn.btn-rm-attribute: i.icon-remove
						
				button.btn.btn-add-attribute: i.icon-plus

				hr
				.operations(data-bind="foreach: operations")
					.operation
						select.visibility(data-bind="value: visibility")
							option(value="+") +
							option(value="-") -
							option(value="#") #
							option(value="~") ~
							option(value="/") /
						input.name(type="text", data-bind="value: name")
						input.type(type="text", data-bind="value: type")
						button.btn.btn-params-toggle(
							data-bind="css: { 'btn-inverse': paramsAreOpen } ") P
						button.btn.btn-static-toggle(
							data-bind="css: { 'btn-inverse': isStatic }") S
						button.btn.btn-rm-operation: i.icon-remove

						// ko if: paramsAreOpen
						.params(data-bind="foreach: params")
							input.param-name(type="text", data-bind="value: name")
							input.param-type(type="text", data-bind="value: type")
							button.btn.btn-rm-param: i.icon-remove

						button.btn.btn-add-param: i.icon-plus
						// /ko
						
				button.btn.btn-add-operation: i.icon-plus
// /ko